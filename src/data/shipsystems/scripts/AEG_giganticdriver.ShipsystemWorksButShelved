package data.hullmods;

import com.fs.starfarer.api.combat.BaseHullMod;
import com.fs.starfarer.api.combat.MutableShipStatsAPI;
import com.fs.starfarer.api.combat.ShipAPI;
import com.fs.starfarer.api.combat.ShipAPI.HullSize;
import com.fs.starfarer.api.impl.campaign.ids.Stats;
import org.lazywizard.lazylib.MathUtils;
import org.lazywizard.lazylib.combat.CombatUtils;

public class AEG_PowerGauge extends BaseHullMod {

    private static final String GAUGE_KEY = "AEG_PowerGauge";
    private static final String SYSTEM_ID = "AEG_GiganticCatastraphe";
    private static final float GAUGE_INCREMENT = 1f;
    private static final float ENEMY_PROXIMITY_BONUS = 0.5f; // Extra gauge fill per enemy within 4000f
    private static final float ENEMY_PROXIMITY_RANGE = 4000f;

    @Override
    public void applyEffectsBeforeShipCreation(HullSize hullSize, MutableShipStatsAPI stats, String id) {
        // Any initial effects can be applied here
    }

    @Override
    public void advanceInCombat(ShipAPI ship, float amount) {
        if (ship == null || !ship.isAlive()) return;

        // Initialize gauge if not already done
        if (!ship.getCustomData().containsKey(GAUGE_KEY)) {
            ship.setCustomData(GAUGE_KEY, 0f);
        }

        float gauge = (float) ship.getCustomData().get(GAUGE_KEY);
        gauge += GAUGE_INCREMENT * amount;

        // Check for enemies within proximity
        int nearbyEnemies = 0;
        for (ShipAPI enemy : CombatUtils.getShipsWithinRange(ship.getLocation(), ENEMY_PROXIMITY_RANGE)) {
            if (enemy.getOwner() != ship.getOwner()) {
                nearbyEnemies++;
            }
        }
        gauge += nearbyEnemies * ENEMY_PROXIMITY_BONUS * amount;

        gauge = MathUtils.clamp(gauge, 0f, 100f);
        ship.setCustomData(GAUGE_KEY, gauge);

        if (gauge >= 50f) {
            ship.getMutableStats().getDamageToArmorMult().modifyPercent(id, 25f); // Example of Polarized Armor Skill buff
            ship.getMutableStats().getShieldDamageTakenMult().modifyMult(id, 0.75f); // Example of Shield Shunt buff
        }
        if (gauge >= 75f) {
            ship.getMutableStats().getBallisticRoFMult().modifyPercent(id, 25f);
            ship.getMutableStats().getEnergyRoFMult().modifyPercent(id, 25f);
            ship.getMutableStats().getMissileRoFMult().modifyPercent(id, 25f);
        }
        if (gauge >= 100f) {
            ship.getMutableStats().getEnergyWeaponDamageMult().modifyPercent(id, 50f);
        }

        // Reset gauge after using ship system or hold for 10 seconds if not present
        if (ship.getSystem().getId().equals(SYSTEM_ID) && ship.getSystem().isActive()) {
            ship.setCustomData(GAUGE_KEY, 0f);
        } else if (!ship.getSystem().getId().equals(SYSTEM_ID) && gauge >= 100f) {
            ship.getMutableStats().getTimeMult().modifyMult(id, 0.1f); // Hold bonuses for 10 seconds
        }
    }

    @Override
    public void unapply(MutableShipStatsAPI stats, String id) {
        // Revert all bonuses here
        stats.getDamageToArmorMult().unmodify(id);
        stats.getShieldDamageTakenMult().unmodify(id);
        stats.getBallisticRoFMult().unmodify(id);
        stats.getEnergyRoFMult().unmodify(id);
        stats.getMissileRoFMult().unmodify(id);
        stats.getEnergyWeaponDamageMult().unmodify(id);
        stats.getTimeMult().unmodify(id); // Revert time multiplier
    }

    @Override
    public String getDescriptionParam(int index, HullSize hullSize) {
        if (index == 0) return "50%";
        if (index == 1) return "25%";
        if (index == 2) return "75%";
        if (index == 3) return "25%";
        if (index == 4) return "100%";
        if (index == 5) return "50%";
        if (index == 6) return "AEG_GiganticCatastraphe";
        return null;
    }

    @Override
    public StatusData getStatusData(int index, State state, float effectLevel) {
        if (index == 0) {
            float gauge = (float) ship.getCustomData().get(GAUGE_KEY);
            return new StatusData("Power Gauge: " + (int) gauge + "%", false);
        }
        return null;
    }
}
