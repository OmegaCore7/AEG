package data.shipsystems.ai;

import com.fs.starfarer.api.combat.ShipAPI;
import com.fs.starfarer.api.combat.ShipSystemAPI;
import com.fs.starfarer.api.impl.combat.BaseShipSystemAI;
import com.fs.starfarer.api.util.IntervalUtil;

public class AEG_GiganticDriverAI extends BaseShipSystemAI {

    private ShipAPI ship;
    private ShipSystemAPI system;
    private IntervalUtil tracker = new IntervalUtil(0.5f, 1f);

    public AEG_GiganticDriverAI(ShipAPI ship, ShipSystemAPI system) {
        this.ship = ship;
        this.system = system;
    }

    @Override
    public void advance(float amount) {
        if (system == null || !system.isActive() || ship == null) return;

        tracker.advance(amount);
        if (tracker.intervalElapsed()) {
            // Example logic: Activate Burn Drive when there is an enemy within a certain range
            ShipAPI target = findTarget();
            if (target != null && ship.getDistance(target) < 2000f) {
                ship.useSystem();
            }
        }
    }

    private ShipAPI findTarget() {
        // Logic to find the closest enemy ship
        ShipAPI closest = null;
        float closestDistance = Float.MAX_VALUE;
        for (ShipAPI enemy : Global.getCombatEngine().getShips()) {
            if (enemy.getOwner() != ship.getOwner() && !enemy.isHulk()) {
                float distance = ship.getDistance(enemy);
                if (distance < closestDistance) {
                    closest = enemy;
                    closestDistance = distance;
                }
            }
        }
        return closest;
    }
}
